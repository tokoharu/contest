{
	"coutendl": {
		"prefix": "output",
		"body": [
			"cout << $1 <<endl;",
			""
		]
	},
	"coutendl2": {
		"prefix": "outputt",
		"body": [
			"cout << (($1) ? ${2:YES}: ${3:NO}) <<endl;",
			""
		]
	},
	"fortemp": {
		"prefix": "fv",
		"body": [
			"for (int ${2:i} = 0; $2 < $1.size(); $2++) {",
			"\tauto& ${3:tmp} = $1[$2];",
			"\t",
			"}"
		]
	},
	"forN": {
		"prefix": "fn",
		"body": [
			"for (int ${1:i} = 0; $1 < ${2:N}; $1++) {",
			"\t",
			"}"
		]
	},
	"forRev": {
		"prefix": "fnr",
		"body": [
			"for (int ${1:i} = $2; $1 >= 0; $1--) {",
			"\t$3",
			"}"
		]
	},
	"sortall": {
		"prefix": ["sv", "sort"],
		"body": [
			"sort($1.begin(), $1.end());",
			""
		]
	},
	"sortrev": {
		"prefix": ["svr", "sortrev"],
		"body": [
			"sort($1.begin(), $1.end());",
			"reverse($1.begin(), $1.end());",
			""
		]
	},
	"forall": {
		"prefix": "all",
		"body": [
			"$1.begin(), $1.end()"
		]
	},
	"gcdlambda": {
		"prefix": "gcdlambda",
		"body": [
			"function<LL(LL, LL)> gcdlambda = [](LL n, LL m) { return __gcd(n, m);};"
		]
	},
	"count": {
		"prefix": ["count_", "countx"],
		"body": [
			"int ${3:res} = count($1.begin(), $1.end(), ${2:valval});",
			"",
		]
	},
	"count_if": {
		"prefix": ["countif_","countifx"],
		"body": [
			"int ${2:res} = count_if($1.begin(), $1.end(), [](auto x) {",
			"\tif ($3) return true;",
			"\treturn false;",
			"});",
			""
		]
	},
	"binary": {
		"prefix": "binary",
		"body": [
			"decision = function<(LL),bool>[&](LL) {};",
			"LL left = 0, right = 0;",
			"while(right - left > 1) {",
			"LL mid = (left + right) / 2;",
			"if(decision(mid)) right = mid;",
			"else left = mid;",
			"}",
			"LL ans = right;"
		]
	},
	"predicate": {
		"prefix": "decision",
		"body": [
			"[&](int x) {",
			"  if($1) return true;",
			"  return false;",
			"}"
		]
	},
	"partial_sum": {
		"prefix": [
			"partialsum",
			"ruiseki"
		],
		"body": [
			"vector<${3:LL}> ${2:rui};",
			"partial_sum($1.begin(), $1.end(), back_inserter($2));",
			""

		]
	},
	"accumulate": {
		"prefix": "accumulate",
		"body": [
			"accumulate($1.begin(), $1.end(), 0LL);",
			""
		]
	},
	"simple_lambda": {
		"prefix": ["lambda"],
		"body": [
			"auto ${1:func} = [&]($2){",
			"\t$3",
			"};",
			""

		]
	},
	"squash": {
		"prefix": "squash",
		"body": [
			"vector<pair<${3:LL}, int> > ${2:sq};",
			"for(auto elem: $1 ){",
			"\tif($2.empty()||$2.back().first!=elem) $2.emplace_back(make_pair(elem, 0));",
			"\t$2.back().second++;",
			"}"
		]
	},
}