#include <bits/stdc++.h>
#include <atcoder/all>
using namespace std;
using namespace atcoder;
typedef long long LL;
typedef pair<LL,LL> PII;

const long double pi = acos(-1.0);

template <typename T>
function<T(T, T)> op_max = [](T a, T b) -> T { return max(a, b); };
template <typename T>
function<T(T, T)> op_min = [](T a, T b) -> T { return min(a, b); };

template <typename T>
function<T(T, T)> op_sum = [](T a, T b) -> T { return a + b; };

LL INF_BASE = 1e18;
LL op_min_func(LL a, LL b) {return min(a, b);}
LL op_max_func(LL a, LL b) {return max(a, b);}
LL get_pINF() {return INF_BASE;}
LL get_nINF() {return -INF_BASE;}
using RMinQ = segtree<LL, op_min_func, get_pINF>;
using RMaxQ = segtree<LL, op_max_func, get_nINF>;


template<int T> inline std::ostream& operator<<(std::ostream& os, static_modint<T> val) {cout << val.val(); return os;}
template<typename T, typename S> inline std::ostream& operator<<(std::ostream& os, const std::pair<T, S> p) { std::cout << "[" << p.first << ";" << p.second << "]"; return os; }
template<typename T, typename S> inline std::ostream& operator<<(std::ostream& os, const std::map<T, S> p) { for (auto el : p) std::cout << "[" << el.first << ";" << el.second << "]"; return os; }
template<typename T, typename S> inline std::ostream& operator<<(std::ostream& os, const std::unordered_map<T, S> p) { for (auto el : p) std::cout << "[" << el.first << ";" << el.second << "]"; return os; }
template<typename T> inline std::ostream& operator<<(std::ostream& os, const std::vector<T>& v) { for (auto el : v) std::cout << el << " "; return os; }
template<typename T> inline std::ostream& operator<<(std::ostream& os, const std::vector<std::vector<T>>& v) { for (auto el : v) std::cout << el << "\n"; return os; }
template<typename T> inline std::ostream& operator<<(std::ostream& os, const std::deque<T>& v) { for (auto el : v) std::cout << el << " "; return os; }
template<typename T> inline std::ostream& operator<<(std::ostream& os, const std::queue<T>& v) { for (auto el : v) std::cout << el << " "; return os; }
template<typename T> inline std::ostream& operator<<(std::ostream& os, const std::stack<T>& v) { for (auto el : v) std::cout << el << " "; return os; }
template<typename T> inline std::ostream& operator<<(std::ostream& os, const std::set<T>& v) { for (auto el : v) std::cout << el << " "; return os; }
template<typename T> inline std::ostream& operator<<(std::ostream& os, const std::multiset<T>& v) { for (auto el : v) std::cout << el << " "; return os; }
template<typename T> inline std::istream& operator>>(std::istream&is, std::vector<T> &vec) {for (T &x : vec) is >> x;return is;}
template<typename T> inline std::vector<T> fetch_vec(int sz) { std::vector<T> ret(sz); for (auto& elem : ret) std::cin >> elem; return ret; }
template<class T> inline bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T> inline bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }


//********************  vec_formatter ************************//

template<typename T> 
inline vector<pair<T, int>> get_vec_enum(vector<T> &vec) {
  vector<pair<T, int>> ret;
  for(int i=0; i<vec.size(); i++) ret.push_back(make_pair(vec[i], i));
  return ret;
}
template<typename T, typename U>
inline vector<pair<T,U>> get_vec_zip(vector<T> &vec1, vector<U>& vec2) {
  vector<pair<T, U>> ret;
  for(int i=0; i<min(vec1.size(), vec2.size()); i++) {
    ret.push_back(make_pair(vec1[i], vec2[i]));
  }
  return ret;
}

///////////////////////////////////////////////

{% if mod %}
using mint = static_modint<{{ mod }}>;
{% endif %}
{% if yes_str %}
const string YES = "{{ yes_str }}";
{% endif %}
{% if no_str %}
const string NO = "{{ no_str }}";
{% endif %}

{% if prediction_success %}
void solve({{ formal_arguments }}){

}
{% endif %}

int main(){ 
    cout << setprecision(10);
    {% if prediction_success %}
    {{input_part}}
    solve({{ actual_arguments }});
    {% else %}
    // Failed to predict input format
    {% endif %}
    return 0;
}